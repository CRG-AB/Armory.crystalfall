{"version":3,"file":"static/js/8375.7fcd3a9f.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/wallets/evm/connectors/smart-wallet/dist/thirdweb-dev-wallets-evm-connectors-smart-wallet.browser.esm.js"],"sourcesContent":["import { C as Connector } from '../../../../dist/connector-05689d68.browser.esm.js';\nimport { utils, BigNumber, providers, Signer, ethers, Contract, constants } from 'ethers';\nimport { i as isTwUrl } from '../../../../dist/url-a45219bd.browser.esm.js';\nimport { s as setAnalyticsHeaders } from '../../../../dist/headers-b7e9dbf8.browser.esm.js';\nimport { M as MANAGED_ACCOUNT_GAS_BUFFER, c as checkContractWalletSignature, A as ACCOUNT_CORE_ABI, E as ENTRYPOINT_ADDRESS } from '../../../../dist/constants-92a692da.browser.esm.js';\nimport { EntryPoint__factory } from '@account-abstraction/contracts';\nimport { _ as _defineProperty } from '../../../../dist/defineProperty-350fc508.browser.esm.js';\nimport { signTypedDataInternal, getDynamicFeeData, ThirdwebSDK, LOCAL_NODE_PKEY, getChainProvider, getGasPrice } from '@thirdweb-dev/sdk';\nimport { chainIdToThirdwebRpc } from '../../../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.browser.esm.js';\nimport { Celo, CeloAlfajoresTestnet, CeloBaklavaTestnet } from '@thirdweb-dev/chains';\nimport 'eventemitter3';\n\nasync function hexlifyUserOp(op) {\n  const userOp = await utils.resolveProperties(op);\n  return Object.keys(userOp).map(key => {\n    let val = userOp[key];\n    if (typeof val !== \"string\" || !val.startsWith(\"0x\")) {\n      val = utils.hexValue(val);\n    }\n    return [key, val];\n  }).reduce((set, _ref) => {\n    let [k, v] = _ref;\n    return {\n      ...set,\n      [k]: v\n    };\n  }, {});\n}\n\n// v0.6 userOpHash calculation\nasync function getUserOpHashV06(userOp, entryPoint, chainId) {\n  const op = await utils.resolveProperties(userOp);\n  const hashedUserOp = {\n    sender: op.sender,\n    nonce: op.nonce,\n    initCodeHash: utils.keccak256(op.initCode),\n    callDataHash: utils.keccak256(op.callData),\n    callGasLimit: op.callGasLimit,\n    verificationGasLimit: op.verificationGasLimit,\n    preVerificationGas: op.preVerificationGas,\n    maxFeePerGas: op.maxFeePerGas,\n    maxPriorityFeePerGas: op.maxPriorityFeePerGas,\n    paymasterAndDataHash: utils.keccak256(op.paymasterAndData)\n  };\n  const userOpType = {\n    components: [{\n      type: \"address\",\n      name: \"sender\"\n    }, {\n      type: \"uint256\",\n      name: \"nonce\"\n    }, {\n      type: \"bytes32\",\n      name: \"initCodeHash\"\n    }, {\n      type: \"bytes32\",\n      name: \"callDataHash\"\n    }, {\n      type: \"uint256\",\n      name: \"callGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"verificationGasLimit\"\n    }, {\n      type: \"uint256\",\n      name: \"preVerificationGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxFeePerGas\"\n    }, {\n      type: \"uint256\",\n      name: \"maxPriorityFeePerGas\"\n    }, {\n      type: \"bytes32\",\n      name: \"paymasterAndDataHash\"\n    }],\n    name: \"hashedUserOp\",\n    type: \"tuple\"\n  };\n  const encoded = utils.defaultAbiCoder.encode([userOpType], [{\n    ...hashedUserOp\n  }]);\n  // remove leading word (total length) and trailing word (zero-length signature)\n\n  const userOpHash = utils.keccak256(encoded);\n  const enc = utils.defaultAbiCoder.encode([\"bytes32\", \"address\", \"uint256\"], [userOpHash, entryPoint, chainId]);\n  return utils.keccak256(enc);\n}\nconst generateRandomUint192 = () => {\n  const rand1 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand2 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand3 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand4 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand5 = BigInt(Math.floor(Math.random() * 0x100000000));\n  const rand6 = BigInt(Math.floor(Math.random() * 0x100000000));\n  return rand1 << BigInt(160) | rand2 << BigInt(128) | rand3 << BigInt(96) | rand4 << BigInt(64) | rand5 << BigInt(32) | rand6;\n};\nconst randomNonce = () => {\n  let hexString = generateRandomUint192().toString(16);\n  if (hexString.length % 2 !== 0) {\n    hexString = \"0\" + hexString;\n  }\n  hexString = \"0x\" + hexString;\n  return BigNumber.from(utils.concat([hexString, \"0x0000000000000000\"]));\n};\n\n/**\n * @internal\n */\n\n/**\n * @internal\n */\n\n/**\n * an API to external a UserOperation with paymaster info\n */\nclass PaymasterAPI {}\n\nconst DEBUG = false; // TODO set as public flag\n\nclass HttpRpcClient {\n  constructor(bundlerUrl, entryPointAddress, chainId, clientId, secretKey) {\n    this.bundlerUrl = bundlerUrl;\n    this.entryPointAddress = entryPointAddress;\n    this.chainId = chainId;\n    const headers = {};\n    if (isTwUrl(this.bundlerUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (secretKey) {\n        headers[\"x-secret-key\"] = secretKey;\n      } else if (clientId) {\n        headers[\"x-client-id\"] = clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    this.userOpJsonRpcProvider = new providers.StaticJsonRpcProvider({\n      url: this.bundlerUrl,\n      headers\n    }, {\n      name: \"Connected bundler network\",\n      chainId\n    });\n    this.initializing = this.validateChainId();\n  }\n  async validateChainId() {\n    // validate chainId is in sync with expected chainid\n    const chain = await this.userOpJsonRpcProvider.send(\"eth_chainId\", []);\n    const bundlerChain = parseInt(chain);\n    if (bundlerChain !== this.chainId) {\n      throw new Error(`bundler ${this.bundlerUrl} is on chainId ${bundlerChain}, but provider is on chainId ${this.chainId}`);\n    }\n  }\n\n  /**\n   * send a UserOperation to the bundler\n   * @param userOp1 - The UserOperation to send\n   * @returns userOpHash the id of this operation, for getUserOperationTransaction\n   */\n  async sendUserOpToBundler(userOp1) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp1);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_sendUserOperation\", jsonRequestData);\n    return await this.userOpJsonRpcProvider.send(\"eth_sendUserOperation\", [hexifiedUserOp, this.entryPointAddress]);\n  }\n  async estimateUserOpGas(userOp) {\n    await this.initializing;\n    const hexifiedUserOp = await hexlifyUserOp(userOp);\n    const jsonRequestData = [hexifiedUserOp, this.entryPointAddress];\n    await this.printUserOperation(\"eth_estimateUserOperationGas\", jsonRequestData);\n    const data = await this.userOpJsonRpcProvider.send(\"eth_estimateUserOperationGas\", [hexifiedUserOp, this.entryPointAddress]);\n    // adds gas buffer to callGasLimit to account for ManagedAccountFactory delegate calls\n    return {\n      preVerificationGas: BigNumber.from(data.preVerificationGas),\n      verificationGas: BigNumber.from(data.verificationGas),\n      verificationGasLimit: BigNumber.from(data.verificationGasLimit),\n      callGasLimit: BigNumber.from(data.callGasLimit).add(MANAGED_ACCOUNT_GAS_BUFFER)\n    };\n  }\n  async getUserOperationGasPrice() {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"thirdweb_getUserOperationGasPrice\", []);\n  }\n  async getUserOperationReceipt(userOpHash) {\n    await this.initializing;\n    return await this.userOpJsonRpcProvider.send(\"eth_getUserOperationReceipt\", [userOpHash]);\n  }\n  async printUserOperation(method, _ref) {\n    {\n      return;\n    }\n  }\n}\n\nclass VerifyingPaymasterAPI extends PaymasterAPI {\n  constructor(paymasterUrl, entryPoint, clientId, secretKey) {\n    super();\n    this.paymasterUrl = paymasterUrl;\n    this.entryPoint = entryPoint;\n    this.clientId = clientId;\n    this.secretKey = secretKey;\n  }\n  async getPaymasterAndData(userOp) {\n    const headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    if (isTwUrl(this.paymasterUrl)) {\n      if (this.secretKey && this.clientId) {\n        throw new Error(\"Cannot use both secret key and client ID. Please use secretKey for server-side applications and clientId for client-side applications.\");\n      }\n      if (this.secretKey) {\n        headers[\"x-secret-key\"] = this.secretKey;\n      } else if (this.clientId) {\n        headers[\"x-client-id\"] = this.clientId;\n        const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token.\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token.\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n\n    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.\n    const response = await fetch(this.paymasterUrl, {\n      method: \"POST\",\n      headers,\n      body: JSON.stringify({\n        jsonrpc: \"2.0\",\n        id: 1,\n        method: \"pm_sponsorUserOperation\",\n        params: [await hexlifyUserOp(userOp), this.entryPoint]\n      })\n    });\n    const res = await response.json();\n    if (!response.ok) {\n      const error = res.error || response.statusText;\n      const code = res.code || \"UNKNOWN\";\n      throw new Error(`Paymaster error: ${error}\nStatus: ${response.status}\nCode: ${code}`);\n    }\n    if (DEBUG) {\n      console.debug(\"Paymaster result:\", res);\n    }\n    if (res.result) {\n      // some paymasters return a string, some return an object with more data\n      if (typeof res.result === \"string\") {\n        return {\n          paymasterAndData: res.result\n        };\n      } else {\n        return res.result;\n      }\n    } else {\n      const error = res.error?.message || res.error || response.statusText || \"unknown error\";\n      throw new Error(`Paymaster error from ${this.paymasterUrl}: ${error}`);\n    }\n  }\n}\nconst getVerifyingPaymaster = (paymasterUrl, entryPoint, clientId, secretKey) => new VerifyingPaymasterAPI(paymasterUrl, entryPoint, clientId, secretKey);\n\n/**\n * This class encapsulates Ethers.js listener function and necessary UserOperation details to\n * discover a TransactionReceipt for the operation.\n *\n * TODO refactor this to a simple event listener on the entry point\n */\nclass UserOperationEventListener {\n  constructor(resolve, reject, entryPoint, sender, userOpHash, nonce, timeout) {\n    this.resolve = resolve;\n    this.reject = reject;\n    this.entryPoint = entryPoint;\n    this.sender = sender;\n    this.userOpHash = userOpHash;\n    this.nonce = nonce;\n    this.timeout = timeout;\n    _defineProperty(this, \"resolved\", false);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.boundLisener = this.listenerCallback.bind(this);\n  }\n  start() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    const filter = this.entryPoint.filters.UserOperationEvent(this.userOpHash);\n    // listener takes time... first query directly:\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    setTimeout(async () => {\n      const res = await this.entryPoint.queryFilter(filter, -10); // look at last 10 blocks\n      if (res.length > 0) {\n        void this.listenerCallback(res[0]);\n      } else {\n        this.entryPoint.once(filter, this.boundLisener);\n      }\n    }, 100);\n  }\n  stop() {\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.entryPoint.off(\"UserOperationEvent\", this.boundLisener);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async listenerCallback() {\n    for (var _len = arguments.length, param = new Array(_len), _key = 0; _key < _len; _key++) {\n      param[_key] = arguments[_key];\n    }\n    // TODO clean this up..\n    // eslint-disable-next-line prefer-rest-params\n    const event = arguments[arguments.length - 1];\n    if (!event.args) {\n      console.error(\"got event without args\", event);\n      return;\n    }\n    // TODO: can this happen? we register to event by userOpHash..\n    if (event.args.userOpHash !== this.userOpHash) {\n      console.log(`== event with wrong userOpHash: sender/nonce: event.${event.args.sender}@${event.args.nonce.toString()}!= userOp.${this.sender}@${parseInt(this.nonce?.toString())}`);\n      return;\n    }\n    const transactionReceipt = await event.getTransactionReceipt();\n\n    // before returning the receipt, update the status from the event.\n    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n    if (!event.args.success) {\n      await this.extractFailureReason(transactionReceipt);\n    }\n    this.stop();\n    this.resolve(transactionReceipt);\n    this.resolved = true;\n  }\n  async extractFailureReason(receipt) {\n    receipt.status = 0;\n    const revertReasonEvents = await this.entryPoint.queryFilter(this.entryPoint.filters.UserOperationRevertReason(this.userOpHash, this.sender), receipt.blockHash);\n    if (revertReasonEvents[0]) {\n      let message = revertReasonEvents[0].args.revertReason;\n      if (message.startsWith(\"0x08c379a0\")) {\n        // Error(string)\n        message = utils.defaultAbiCoder.decode([\"string\"], \"0x\" + message.substring(10)).toString();\n      }\n      this.reject(new Error(`UserOp failed with reason: ${message}`));\n    }\n  }\n}\n\nclass ERC4337EthersSigner extends Signer {\n  // TODO: we have 'erc4337provider', remove shared dependencies or avoid two-way reference\n  constructor(config, originalSigner, erc4337provider, httpRpcClient, smartAccountAPI) {\n    super();\n    utils.defineReadOnly(this, \"provider\", erc4337provider);\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.erc4337provider = erc4337provider;\n    this.httpRpcClient = httpRpcClient;\n    this.smartAccountAPI = smartAccountAPI;\n    this.approving = false;\n  }\n  // This one is called by Contract. It signs the request and passes in to Provider to be sent.\n  async sendTransaction(transaction, options) {\n    if (!this.approving) {\n      this.approving = true;\n      const tx = await this.smartAccountAPI.createApproveTx();\n      if (tx) {\n        await (await this.sendTransaction(tx)).wait();\n      }\n      this.approving = false;\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const transactionResponse = await this.erc4337provider.constructUserOpTransactionResponse(userOperation);\n    try {\n      await this.httpRpcClient.sendUserOpToBundler(userOperation);\n    } catch (error) {\n      throw this.unwrapError(error);\n    }\n    // TODO: handle errors - transaction that is \"rejected\" by bundler is _not likely_ to ever resolve its \"wait()\"\n    return transactionResponse;\n  }\n  unwrapError(errorIn) {\n    try {\n      let errorMsg = \"Unknown Error\";\n      if (errorIn.error) {\n        errorMsg = `The bundler has failed to include UserOperation in a batch: ${errorIn.error}`;\n      } else if (errorIn.body && typeof errorIn.body === \"string\") {\n        const errorBody = JSON.parse(errorIn.body);\n        const errorStatus = errorIn.status || \"UNKNOWN\";\n        const errorCode = errorBody?.code || \"UNKNOWN\";\n        let failedOpMessage = errorBody?.error?.message || errorBody?.error?.data || errorBody?.error || errorIn.reason;\n        if (failedOpMessage?.includes(\"FailedOp\")) {\n          let paymasterInfo = \"\";\n          // TODO: better error extraction methods will be needed\n          const matched = failedOpMessage.match(/FailedOp\\((.*)\\)/);\n          if (matched) {\n            const split = matched[1].split(\",\");\n            paymasterInfo = `(paymaster address: ${split[1]})`;\n            failedOpMessage = split[2];\n          }\n          errorMsg = `The bundler has failed to include UserOperation in a batch: ${failedOpMessage} ${paymasterInfo}`;\n        } else {\n          errorMsg = `RPC error: ${failedOpMessage}\nStatus: ${errorStatus}\nCode: ${errorCode}`;\n        }\n      }\n      const error = new Error(errorMsg);\n      error.stack = errorIn.stack;\n      return error;\n    } catch (error) {}\n    return errorIn;\n  }\n  async verifyAllNecessaryFields(transactionRequest) {\n    if (!transactionRequest.to) {\n      throw new Error(\"Missing call target\");\n    }\n    if (!transactionRequest.data && !transactionRequest.value) {\n      // TBD: banning no-op UserOps seems to make sense on provider level\n      throw new Error(\"Missing call data or value\");\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  connect(provider) {\n    throw new Error(\"changing providers is not supported\");\n  }\n  async getAddress() {\n    if (!this.address) {\n      this.address = await this.erc4337provider.getSenderAccountAddress();\n    }\n    return this.address;\n  }\n\n  /**\n   * Sign a message and return the signature\n   */\n  async signMessage(message) {\n    // Deploy smart wallet if needed\n    const isNotDeployed = await this.smartAccountAPI.checkAccountPhantom();\n    if (isNotDeployed) {\n      console.log(\"Account contract not deployed yet. Deploying account before signing message\");\n      const tx = await this.sendTransaction({\n        to: await this.getAddress(),\n        data: \"0x\"\n      });\n      await tx.wait();\n    }\n    const [chainId, address] = await Promise.all([this.getChainId(), this.getAddress()]);\n    const originalMsgHash = utils.hashMessage(message);\n    let factorySupports712;\n    let signature;\n    const rpcUrl = chainIdToThirdwebRpc(chainId, this.config.clientId);\n    const headers = {};\n    if (isTwUrl(rpcUrl)) {\n      const bundleId = typeof globalThis !== \"undefined\" && \"APP_BUNDLE_ID\" in globalThis ? globalThis.APP_BUNDLE_ID : undefined;\n      if (this.config.secretKey) {\n        headers[\"x-secret-key\"] = this.config.secretKey;\n      } else if (this.config.clientId) {\n        headers[\"x-client-id\"] = this.config.clientId;\n        if (bundleId) {\n          headers[\"x-bundle-id\"] = bundleId;\n        }\n      }\n\n      // Dashboard token\n      if (typeof globalThis !== \"undefined\" && \"TW_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_AUTH_TOKEN}`;\n      }\n\n      // CLI token\n      if (typeof globalThis !== \"undefined\" && \"TW_CLI_AUTH_TOKEN\" in globalThis && typeof globalThis.TW_CLI_AUTH_TOKEN === \"string\") {\n        headers[\"authorization\"] = `Bearer ${globalThis.TW_CLI_AUTH_TOKEN}`;\n        headers[\"x-authorize-wallet\"] = \"true\";\n      }\n      setAnalyticsHeaders(headers);\n    }\n    try {\n      const provider = new providers.StaticJsonRpcProvider({\n        url: rpcUrl,\n        headers\n      }, chainId);\n      const walletContract = new Contract(address, [\"function getMessageHash(bytes32 _hash) public view returns (bytes32)\"], provider);\n      // if this fails it's a pre 712 factory\n      await walletContract.getMessageHash(originalMsgHash);\n      factorySupports712 = true;\n    } catch {\n      factorySupports712 = false;\n    }\n    if (factorySupports712) {\n      const result = await signTypedDataInternal(this, {\n        name: \"Account\",\n        version: \"1\",\n        chainId,\n        verifyingContract: address\n      }, {\n        AccountMessage: [{\n          name: \"message\",\n          type: \"bytes\"\n        }]\n      }, {\n        message: utils.defaultAbiCoder.encode([\"bytes32\"], [originalMsgHash])\n      });\n      signature = result.signature;\n    } else {\n      signature = await this.originalSigner.signMessage(message);\n    }\n    const isValid = await checkContractWalletSignature(message, signature, address, chainId, this.config.clientId, this.config.secretKey);\n    if (isValid) {\n      return signature;\n    } else {\n      throw new Error(\"Unable to verify signature on smart account, please make sure the smart account is deployed and the signature is valid.\");\n    }\n  }\n  async signTransaction(transaction, options) {\n    const tx = await ethers.utils.resolveProperties(transaction);\n    await this.verifyAllNecessaryFields(tx);\n    const multidimensionalNonce = randomNonce();\n    const unsigned = await this.smartAccountAPI.createUnsignedUserOp(this.httpRpcClient, {\n      target: tx.to || \"\",\n      data: tx.data?.toString() || \"0x\",\n      value: tx.value,\n      gasLimit: tx.gasLimit,\n      nonce: multidimensionalNonce\n    }, options);\n    const userOperation = await this.smartAccountAPI.signUserOp(unsigned);\n    const userOpString = JSON.stringify(await hexlifyUserOp(userOperation));\n    return userOpString;\n  }\n}\n\nclass ERC4337EthersProvider extends providers.BaseProvider {\n  constructor(chainId, config, originalSigner, originalProvider, httpRpcClient, entryPoint, smartAccountAPI) {\n    super({\n      name: \"ERC-4337 Custom Network\",\n      chainId\n    });\n    this.chainId = chainId;\n    this.config = config;\n    this.originalSigner = originalSigner;\n    this.originalProvider = originalProvider;\n    this.httpRpcClient = httpRpcClient;\n    this.entryPoint = entryPoint;\n    this.smartAccountAPI = smartAccountAPI;\n    this.signer = new ERC4337EthersSigner(config, originalSigner, this, httpRpcClient, smartAccountAPI);\n  }\n  getSigner() {\n    return this.signer;\n  }\n  async perform(method, params) {\n    if (method === \"sendTransaction\" || method === \"getTransactionReceipt\") {\n      // TODO: do we need 'perform' method to be available at all?\n      // there is nobody out there to use it for ERC-4337 methods yet, we have nothing to override in fact.\n      throw new Error(\"Should not get here. Investigate.\");\n    }\n    if (method === \"estimateGas\") {\n      // gas estimation does nothing at this layer, sendTransaction will do the gas estimation for the userOp\n      return BigNumber.from(500000);\n    }\n    return await this.originalProvider.perform(method, params);\n  }\n  async getTransaction(transactionHash) {\n    // TODO\n    return await super.getTransaction(transactionHash);\n  }\n  async getTransactionReceipt(transactionHash) {\n    const userOpHash = await transactionHash;\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      new UserOperationEventListener(resolve, reject, this.entryPoint, sender, userOpHash).start();\n    });\n  }\n  async getSenderAccountAddress() {\n    return await this.smartAccountAPI.getAccountAddress();\n  }\n  async waitForTransaction(transactionHash, confirmations, timeout) {\n    const sender = await this.getSenderAccountAddress();\n    return await new Promise((resolve, reject) => {\n      const listener = new UserOperationEventListener(resolve, reject, this.entryPoint, sender, transactionHash, undefined, timeout);\n      listener.start();\n    });\n  }\n\n  // fabricate a response in a format usable by ethers users...\n  async constructUserOpTransactionResponse(userOp1) {\n    const userOp = await utils.resolveProperties(userOp1);\n    const userOpHash = await this.smartAccountAPI.getUserOpHash(userOp);\n    return {\n      hash: userOpHash,\n      confirmations: 0,\n      from: userOp.sender,\n      nonce: 0,\n      // not the real nonce, but good enough for this purpose\n      gasLimit: BigNumber.from(userOp.callGasLimit),\n      // ??\n      value: BigNumber.from(0),\n      data: utils.hexValue(userOp.callData),\n      // should extract the actual called method from this \"execFromEntryPoint()\" call\n      chainId: this.chainId,\n      wait: async confirmations => {\n        const transactionReceipt = await this.smartAccountAPI.getUserOpReceipt(this.httpRpcClient, userOpHash);\n        if (userOp.initCode.length !== 0) {\n          // checking if the wallet has been deployed by the transaction; it must be if we are here\n          await this.smartAccountAPI.checkAccountPhantom();\n        }\n        return transactionReceipt;\n      }\n    };\n  }\n  async detectNetwork() {\n    return this.originalProvider.detectNetwork();\n  }\n}\n\n/**\n * wrap an existing provider to tunnel requests through Account Abstraction.\n * @param originalProvider - The normal provider\n * @param config - see {@link ClientConfig} for more info\n * @param originalSigner - use this signer as the owner. of this wallet. By default, use the provider's signer\n */\nfunction create4337Provider(config, accountApi, originalProvider, chainId) {\n  const entryPoint = EntryPoint__factory.connect(config.entryPointAddress, originalProvider);\n  const httpRpcClient = new HttpRpcClient(config.bundlerUrl, config.entryPointAddress, chainId, config.clientId, config.secretKey);\n  return new ERC4337EthersProvider(chainId, config, config.localSigner, originalProvider, httpRpcClient, entryPoint, accountApi);\n}\n\nconst DUMMY_SIGNATURE = \"0xfffffffffffffffffffffffffffffff0000000000000000000000000000000007aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa1c\";\n\n/**\n * Base class for all Smart Wallet ERC-4337 Clients to implement.\n * Subclass should inherit 5 methods to support a specific wallet contract:\n *\n * - getAccountInitCode - return the value to put into the \"initCode\" field, if the account is not yet deployed. should create the account instance using a factory contract.\n * - getNonce - return current account's nonce value\n * - encodeExecute - encode the call from entryPoint through our account to the target contract.\n * - signUserOpHash - sign the hash of a UserOp.\n *\n * The user can use the following APIs:\n * - createUnsignedUserOp - given \"target\" and \"calldata\", fill userOp to perform that operation from the account.\n * - createSignedUserOp - helper to call the above createUnsignedUserOp, and then extract the userOpHash and sign it\n */\nclass BaseAccountAPI {\n  // entryPoint connected to \"zero\" address. allowed to make static calls (e.g. to getSenderAddress)\n\n  /**\n   * base constructor.\n   * subclass SHOULD add parameters that define the owner (signer) of this wallet\n   */\n  constructor(params) {\n    _defineProperty(this, \"isPhantom\", true);\n    this.provider = params.provider;\n    this.entryPointAddress = params.entryPointAddress;\n    this.accountAddress = params.accountAddress;\n    this.paymasterAPI = params.paymasterAPI;\n    this.gasless = params.gasless;\n    this.erc20PaymasterAddress = params.erc20PaymasterAddress;\n    this.erc20TokenAddress = params.erc20TokenAddress;\n\n    // factory \"connect\" define the contract address. the contract \"connect\" defines the \"from\" address.\n    this.entryPointView = EntryPoint__factory.connect(params.entryPointAddress, params.provider).connect(ethers.constants.AddressZero);\n  }\n\n  /**\n   * return the value to put into the \"initCode\" field, if the contract is not yet deployed.\n   * this value holds the \"factory\" address, followed by this account's information\n   */\n\n  /**\n   * return current account's nonce.\n   */\n\n  /**\n   * encode the call from entryPoint through our account to the target contract.\n   * @param target - The target contract address\n   * @param value - The value to send to the target contract\n   * @param data - The calldata to send to the target contract\n   */\n\n  /**\n   * sign a userOp's hash (userOpHash).\n   * @param userOpHash - The hash to sign\n   */\n\n  /**\n   * calculate the account address even before it is deployed\n   */\n\n  /**\n   * check if the contract is already deployed.\n   */\n  async checkAccountPhantom() {\n    if (!this.isPhantom) {\n      // already deployed. no need to check anymore.\n      return this.isPhantom;\n    }\n    const senderAddressCode = await this.provider.getCode(this.getAccountAddress());\n    if (senderAddressCode.length > 2) {\n      this.isPhantom = false;\n    }\n    return this.isPhantom;\n  }\n  /**\n   * return initCode value to into the UserOp.\n   * (either deployment code, or empty hex if contract already deployed)\n   */\n  async getInitCode() {\n    if (await this.checkAccountPhantom()) {\n      return await this.getAccountInitCode();\n    }\n    return \"0x\";\n  }\n\n  /**\n   * return maximum gas used for verification.\n   * NOTE: createUnsignedUserOp will add to this value the cost of creation, if the contract is not yet created.\n   */\n  async getVerificationGasLimit() {\n    return 100000;\n  }\n\n  /**\n   * return userOpHash for signing.\n   * This value matches entryPoint.getUserOpHash (calculated off-chain, to avoid a view call)\n   * @param userOp - userOperation, (signature field ignored)\n   */\n  async getUserOpHash(userOp) {\n    const chainId = await this.provider.getNetwork().then(net => net.chainId);\n    return getUserOpHashV06(userOp, this.entryPointAddress, chainId);\n  }\n\n  /**\n   * return the account's address.\n   * this value is valid even before deploying the contract.\n   */\n  async getAccountAddress() {\n    if (!this.senderAddress) {\n      if (this.accountAddress) {\n        this.senderAddress = this.accountAddress;\n      } else {\n        this.senderAddress = await this.getCounterFactualAddress();\n      }\n    }\n    return this.senderAddress;\n  }\n  async estimateCreationGas(initCode) {\n    if (!initCode || initCode === \"0x\") {\n      return 0;\n    }\n    const deployerAddress = initCode.substring(0, 42);\n    const deployerCallData = \"0x\" + initCode.substring(42);\n    return await this.provider.estimateGas({\n      to: deployerAddress,\n      data: deployerCallData\n    });\n  }\n  async createUnsignedUserOp(httpRpcClient, info, options) {\n    let {\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = info;\n    // get fees from bundler if available\n    if (isTwUrl(httpRpcClient.bundlerUrl)) {\n      const bundlerFeeData = await httpRpcClient.getUserOperationGasPrice();\n      maxFeePerGas = BigNumber.from(bundlerFeeData.maxFeePerGas);\n      maxPriorityFeePerGas = BigNumber.from(bundlerFeeData.maxPriorityFeePerGas);\n    } else {\n      // if bundler is not available, try to get fees from the network if not passed explicitly\n      if (!maxFeePerGas || !maxPriorityFeePerGas) {\n        const feeData = await getDynamicFeeData(this.provider);\n        if (!maxPriorityFeePerGas) {\n          maxPriorityFeePerGas = feeData.maxPriorityFeePerGas ?? undefined;\n        }\n        if (!maxFeePerGas) {\n          maxFeePerGas = feeData.maxFeePerGas ?? undefined;\n          const network = await this.provider.getNetwork();\n          const chainId = network.chainId;\n          if (chainId === Celo.chainId || chainId === CeloAlfajoresTestnet.chainId || chainId === CeloBaklavaTestnet.chainId) {\n            maxPriorityFeePerGas = maxFeePerGas;\n          }\n        }\n      }\n    }\n    if (!maxFeePerGas || !maxPriorityFeePerGas) {\n      throw new Error(\"maxFeePerGas or maxPriorityFeePerGas could not be calculated, please pass them explicitely\");\n    }\n    const [sender, nonce] = await Promise.all([this.getAccountAddress(), info.nonce ? Promise.resolve(info.nonce) : this.getNonce()]);\n    const initCode = await this.getInitCode();\n    const value = parseNumber(info.value) ?? BigNumber.from(0);\n    const callData = options?.batchData ? info.data : await this.prepareExecute(info.target, value, info.data).then(async tx => {\n      if (!info.gasLimit) {\n        // estimate gas on the inner transactions to simulate\n        // bundler would not revert otherwise\n        await this.provider.estimateGas({\n          from: sender,\n          to: info.target,\n          data: info.data,\n          value: value\n        });\n      }\n      return tx.encode();\n    });\n    const partialOp = {\n      sender,\n      nonce,\n      initCode,\n      callData,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      callGasLimit: BigNumber.from(1000000),\n      verificationGasLimit: BigNumber.from(1000000),\n      preVerificationGas: BigNumber.from(1000000),\n      paymasterAndData: \"0x\",\n      signature: DUMMY_SIGNATURE\n    };\n\n    // paymaster data + maybe used for estimation as well\n    const gasless = options?.gasless !== undefined ? options.gasless : this.gasless;\n    const useErc20Paymaster = this.erc20PaymasterAddress && this.erc20TokenAddress && (await this.isAccountApproved());\n    if (useErc20Paymaster) {\n      partialOp.paymasterAndData = this.erc20PaymasterAddress;\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    } else if (gasless) {\n      const paymasterResult = await this.paymasterAPI.getPaymasterAndData(partialOp);\n      const paymasterAndData = paymasterResult.paymasterAndData;\n      if (paymasterAndData && paymasterAndData !== \"0x\") {\n        partialOp.paymasterAndData = paymasterAndData;\n      }\n      // paymaster can have the gas limits in the response\n      if (paymasterResult.callGasLimit && paymasterResult.verificationGasLimit && paymasterResult.preVerificationGas) {\n        partialOp.callGasLimit = BigNumber.from(paymasterResult.callGasLimit);\n        partialOp.verificationGasLimit = BigNumber.from(paymasterResult.verificationGasLimit);\n        partialOp.preVerificationGas = BigNumber.from(paymasterResult.preVerificationGas);\n      } else {\n        // otherwise fallback to bundler for gas limits\n        let estimates;\n        try {\n          estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n        } catch (error) {\n          throw this.unwrapBundlerError(error);\n        }\n        partialOp.callGasLimit = estimates.callGasLimit;\n        partialOp.verificationGasLimit = estimates.verificationGasLimit;\n        partialOp.preVerificationGas = estimates.preVerificationGas;\n        // need paymaster to re-sign after estimates\n        if (paymasterAndData && paymasterAndData !== \"0x\") {\n          const paymasterResult2 = await this.paymasterAPI.getPaymasterAndData(partialOp);\n          if (paymasterResult2.paymasterAndData && paymasterResult2.paymasterAndData !== \"0x\") {\n            partialOp.paymasterAndData = paymasterResult2.paymasterAndData;\n          }\n        }\n      }\n    } else {\n      // query bundler for gas limits\n      let estimates;\n      try {\n        estimates = await httpRpcClient.estimateUserOpGas(partialOp);\n      } catch (error) {\n        throw this.unwrapBundlerError(error);\n      }\n      partialOp.callGasLimit = estimates.callGasLimit;\n      partialOp.verificationGasLimit = estimates.verificationGasLimit;\n      partialOp.preVerificationGas = estimates.preVerificationGas;\n    }\n    return {\n      ...partialOp,\n      signature: \"\"\n    };\n  }\n\n  /**\n   * Sign the filled userOp.\n   * @param userOp - The UserOperation to sign (with signature field ignored)\n   */\n  async signUserOp(userOp) {\n    const userOpHash = await this.getUserOpHash(userOp);\n    const signature = await this.signUserOpHash(userOpHash);\n    return {\n      ...userOp,\n      signature\n    };\n  }\n\n  /**\n   * get the transaction that has this userOpHash mined, or throws if not found\n   * @param userOpHash - returned by sendUserOpToBundler (or by getUserOpHash..)\n   * @param timeout - stop waiting after this timeout\n   * @param interval - time to wait between polls.\n   * @returns The transaction receipt, or an error if timed out.\n   */\n  async getUserOpReceipt(httpRpcClient, userOpHash) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 120000;\n    let interval = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;\n    const endtime = Date.now() + timeout;\n    while (Date.now() < endtime) {\n      const userOpReceipt = await httpRpcClient.getUserOperationReceipt(userOpHash);\n      if (userOpReceipt) {\n        // avoid desync with current provider state\n        return await this.provider.waitForTransaction(userOpReceipt.receipt.transactionHash);\n      }\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    throw new Error(\"Timeout waiting for userOp to be mined\");\n  }\n  unwrapBundlerError(error) {\n    const message = error?.error?.message || error.error || error.message || error;\n    return new Error(message);\n  }\n}\nfunction parseNumber(a) {\n  if (!a || a === \"\") {\n    return null;\n  }\n  return BigNumber.from(a.toString());\n}\n\nclass AccountAPI extends BaseAccountAPI {\n  constructor(params, originalProvider) {\n    super({\n      ...params,\n      provider: originalProvider\n    });\n    this.params = params;\n    // Technically dont need the signer here, but we need to encode/estimate gas with it so a signer is required\n    // We don't want to use the localSigner directly since it might be connected to another chain\n    // so we just use the public hardhat pkey instead\n    this.sdk = ThirdwebSDK.fromPrivateKey(LOCAL_NODE_PKEY, params.chain, {\n      clientId: params.clientId,\n      secretKey: params.secretKey,\n      // @ts-expect-error expected chain type error\n      supportedChains: typeof params.chain === \"object\" ? [params.chain] : undefined\n    });\n  }\n  async getChainId() {\n    return await this.provider.getNetwork().then(n => n.chainId);\n  }\n  async getAccountContract() {\n    if (!this.accountContract) {\n      if (this.params.accountInfo?.abi) {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), this.params.accountInfo.abi);\n      } else {\n        this.accountContract = await this.sdk.getContract(await this.getAccountAddress(), ACCOUNT_CORE_ABI);\n      }\n    }\n    return this.accountContract;\n  }\n  async getAccountInitCode() {\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    const tx = await this.params.factoryInfo.createAccount(factory, localSigner);\n    return utils.hexConcat([factory.getAddress(), tx.encode()]);\n  }\n  async getFactoryContract() {\n    if (this.factoryContract) {\n      return this.factoryContract;\n    }\n    if (this.params.factoryInfo?.abi) {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress, this.params.factoryInfo.abi);\n    } else {\n      this.factoryContract = await this.sdk.getContract(this.params.factoryAddress);\n    }\n    return this.factoryContract;\n  }\n  async getCounterFactualAddress() {\n    if (this.params.accountAddress) {\n      return this.params.accountAddress;\n    }\n    const factory = await this.getFactoryContract();\n    const localSigner = await this.params.localSigner.getAddress();\n    return this.params.factoryInfo.getAccountAddress(factory, localSigner);\n  }\n  async getNonce() {\n    if (await this.checkAccountPhantom()) {\n      return BigNumber.from(0);\n    }\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.getNonce(accountContract);\n  }\n  async prepareExecute(target, value, data) {\n    const accountContract = await this.getAccountContract();\n    return this.params.accountInfo.execute(accountContract, target, value, data);\n  }\n  async prepareExecuteBatch(targets, values, datas) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.prepare(\"executeBatch\", [targets, values, datas]);\n  }\n  async signUserOpHash(userOpHash) {\n    return await this.params.localSigner.signMessage(utils.arrayify(userOpHash));\n  }\n  async isAcountDeployed() {\n    return !(await this.checkAccountPhantom());\n  }\n  async isAccountApproved() {\n    if (!this.params.erc20PaymasterAddress || !this.params.erc20TokenAddress) {\n      return true;\n    }\n    const swAddress = await this.getCounterFactualAddress();\n    const ERC20Abi = (await import('@thirdweb-dev/contracts-js/dist/abis/IERC20.json')).default;\n    const erc20Token = await this.sdk.getContract(this.params.erc20TokenAddress, ERC20Abi);\n    const allowance = await erc20Token.call(\"allowance\", [swAddress, this.params.erc20PaymasterAddress]);\n    return allowance.gte(BigNumber.from(2).pow(96).sub(1));\n  }\n  async createApproveTx() {\n    if (await this.isAccountApproved()) {\n      return undefined;\n    }\n    const amountToApprove = BigNumber.from(2).pow(96).sub(1);\n    const ethersSigner = new ethers.Wallet(LOCAL_NODE_PKEY, this.provider);\n    const erc20Contract = new Contract(this.params.erc20TokenAddress, [\"function approve(address spender, uint256 amount) public returns (bool)\"], ethersSigner);\n    const tx = {\n      to: this.params.erc20TokenAddress,\n      from: await this.getAccountAddress(),\n      value: 0,\n      data: erc20Contract.interface.encodeFunctionData(\"approve\", [this.params.erc20PaymasterAddress, amountToApprove])\n    };\n    return tx;\n  }\n}\n\nclass SmartWalletConnector extends Connector {\n  constructor(config) {\n    super();\n    this.config = config;\n  }\n  async initialize(params) {\n    const config = this.config;\n    const originalProvider = getChainProvider(config.chain, {\n      clientId: config.clientId,\n      secretKey: config.secretKey\n    });\n    this.chainId = (await originalProvider.getNetwork()).chainId;\n    const bundlerUrl = this.config.bundlerUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const paymasterUrl = this.config.paymasterUrl || `https://${this.chainId}.bundler.thirdweb.com`;\n    const entryPointAddress = config.entryPointAddress || ENTRYPOINT_ADDRESS;\n    const localSigner = await params.personalWallet.getSigner();\n    const providerConfig = {\n      chain: config.chain,\n      localSigner,\n      entryPointAddress,\n      bundlerUrl,\n      paymasterAPI: this.config.paymasterAPI ? this.config.paymasterAPI : getVerifyingPaymaster(paymasterUrl, entryPointAddress, this.config.clientId, this.config.secretKey),\n      gasless: config.gasless,\n      factoryAddress: config.factoryAddress,\n      accountAddress: params.accountAddress,\n      factoryInfo: {\n        createAccount: config.factoryInfo?.createAccount || this.defaultFactoryInfo().createAccount,\n        getAccountAddress: config.factoryInfo?.getAccountAddress || this.defaultFactoryInfo().getAccountAddress,\n        abi: config.factoryInfo?.abi\n      },\n      accountInfo: {\n        execute: config.accountInfo?.execute || this.defaultAccountInfo().execute,\n        getNonce: config.accountInfo?.getNonce || this.defaultAccountInfo().getNonce,\n        abi: config.accountInfo?.abi\n      },\n      clientId: config.clientId,\n      secretKey: config.secretKey,\n      erc20PaymasterAddress: config.erc20PaymasterAddress,\n      erc20TokenAddress: config.erc20TokenAddress\n    };\n    this.personalWallet = params.personalWallet;\n    const accountApi = new AccountAPI(providerConfig, originalProvider);\n    this.aaProvider = create4337Provider(providerConfig, accountApi, originalProvider, this.chainId);\n    this.accountApi = accountApi;\n  }\n  async connect(connectionArgs) {\n    await this.initialize(connectionArgs);\n    return await this.getAddress();\n  }\n  getProvider() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider);\n  }\n  async getSigner() {\n    if (!this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return Promise.resolve(this.aaProvider.getSigner());\n  }\n  async getAddress() {\n    const signer = await this.getSigner();\n    return signer.getAddress();\n  }\n  async isConnected() {\n    try {\n      const address = await this.getAddress();\n      return !!address;\n    } catch (e) {\n      return false;\n    }\n  }\n  async disconnect() {\n    this.personalWallet = undefined;\n    this.aaProvider = undefined;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async switchChain(chainId) {\n    const provider = await this.getProvider();\n    const currentChainId = (await provider.getNetwork()).chainId;\n    if (currentChainId !== chainId) {\n      // only throw if actually trying to switch chains\n      throw new Error(\"Not supported.\");\n    }\n  }\n  setupListeners() {\n    return Promise.resolve();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateChains(chains) {}\n\n  /**\n   * Check whether the connected signer can execute a given transaction using the smart wallet.\n   * @param transaction - The transaction to execute using the smart wallet.\n   * @returns whether the connected signer can execute the transaction using the smart wallet.\n   */\n  async hasPermissionToExecute(transaction) {\n    const accountContract = await this.getAccountContract();\n    const signer = await this.getSigner();\n    const signerAddress = await signer.getAddress();\n    const restrictions = (await accountContract.account.getAllSigners()).filter(item => ethers.utils.getAddress(item.signer) === ethers.utils.getAddress(signerAddress))[0]?.permissions;\n    if (!restrictions) {\n      return false;\n    }\n    return restrictions.approvedCallTargets.includes(transaction.getTarget());\n  }\n\n  /// PREPARED TRANSACTIONS\n\n  /**\n   * Send a single transaction without waiting for confirmations\n   * @param transaction - the transaction to send\n   * @param config - optional the transaction configuration\n   * @returns The awaitable transaction\n   */\n  async send(transaction, options) {\n    const signer = await this.getSigner();\n    return signer.sendTransaction({\n      to: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue()\n    }, options);\n  }\n\n  /**\n   * Execute a single transaction (waiting for confirmations)\n   * @param transaction - The transaction to execute\n   * @returns The transaction receipt\n   */\n  async execute(transaction, options) {\n    const tx = await this.send(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  /**\n   * Execute multiple transactions in a single batch\n   * @param transactions - The transactions to execute\n   * @returns The transaction receipt\n   */\n  async executeBatch(transactions, options) {\n    const tx = await this.sendBatch(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// RAW TRANSACTIONS\n\n  async sendRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    return signer.sendTransaction(transaction, options);\n  }\n  async executeRaw(transaction, options) {\n    const tx = await this.sendRaw(transaction, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n  async sendBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const batch = await this.prepareBatchRaw(transactions);\n    return signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: batch.tx.encode(),\n      value: 0\n    }, {\n      ...options,\n      batchData: batch.batchData // batched tx flag\n    });\n  }\n  async executeBatchRaw(transactions, options) {\n    const tx = await this.sendBatchRaw(transactions, options);\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /// ESTIMATION\n\n  async estimate(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return this.estimateTx({\n      target: transaction.getTarget(),\n      data: transaction.encode(),\n      value: await transaction.getValue(),\n      gasLimit: await transaction.getOverrides().gasLimit,\n      maxFeePerGas: await transaction.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await transaction.getOverrides().maxPriorityFeePerGas,\n      nonce: await transaction.getOverrides().nonce\n    }, options);\n  }\n  async estimateRaw(transaction, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const tx = await ethers.utils.resolveProperties(transaction);\n    return this.estimateTx({\n      target: tx.to || constants.AddressZero,\n      data: tx.data?.toString() || \"\",\n      value: tx.value || BigNumber.from(0),\n      gasLimit: tx.gasLimit,\n      maxFeePerGas: tx.maxFeePerGas,\n      maxPriorityFeePerGas: tx.maxPriorityFeePerGas,\n      nonce: tx.nonce\n    }, options);\n  }\n  async estimateBatch(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchTx(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n  async estimateBatchRaw(transactions, options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const {\n      tx,\n      batchData\n    } = await this.prepareBatchRaw(transactions);\n    return this.estimateTx({\n      target: tx.getTarget(),\n      data: tx.encode(),\n      value: await tx.getValue(),\n      gasLimit: await tx.getOverrides().gasLimit,\n      maxFeePerGas: await tx.getOverrides().maxFeePerGas,\n      maxPriorityFeePerGas: await tx.getOverrides().maxPriorityFeePerGas,\n      nonce: await tx.getOverrides().nonce\n    }, {\n      ...options,\n      batchData\n    });\n  }\n\n  //// DEPLOYMENT\n\n  /**\n   * Manually deploy the smart wallet contract. If already deployed this will throw an error.\n   * Note that this is not necessary as the smart wallet will be deployed automatically on the first transaction the user makes.\n   * @returns The transaction receipt\n   */\n  async deploy(options) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const signer = await this.getSigner();\n    const tx = await signer.sendTransaction({\n      to: await signer.getAddress(),\n      data: \"0x\"\n    }, {\n      ...options,\n      batchData: {\n        targets: [],\n        data: [],\n        values: []\n      } // batched tx flag to avoid hitting the Router fallback method\n    });\n    const receipt = await tx.wait();\n    return {\n      receipt\n    };\n  }\n\n  /**\n   * Check if the smart wallet contract is deployed\n   * @returns true if the smart wallet contract is deployed\n   */\n  async isDeployed() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    return await this.accountApi.isAcountDeployed();\n  }\n  async deployIfNeeded(options) {\n    const isDeployed = await this.isDeployed();\n    if (!isDeployed) {\n      await this.deploy(options);\n    }\n  }\n\n  //// PERMISSIONS\n\n  async grantPermissions(target, permissions) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantPermissions(target, permissions);\n  }\n  async revokePermissions(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAccess(target);\n  }\n  async addAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.grantAdminPermissions(target);\n  }\n  async removeAdmin(target) {\n    const accountContract = await this.getAccountContract();\n    return accountContract.account.revokeAdminPermissions(target);\n  }\n  async getAllActiveSigners() {\n    const isDeployed = await this.isDeployed();\n    if (isDeployed) {\n      const accountContract = await this.getAccountContract();\n      return accountContract.account.getAllAdminsAndSigners();\n    } else {\n      const personalWallet = await this.personalWallet?.getSigner();\n      if (!personalWallet) {\n        throw new Error(\"Personal wallet not connected\");\n      }\n      return [{\n        isAdmin: true,\n        signer: await personalWallet.getAddress(),\n        permissions: {\n          startDate: new Date(0),\n          expirationDate: new Date(0),\n          nativeTokenLimitPerTransaction: BigNumber.from(0),\n          approvedCallTargets: []\n        }\n      }];\n    }\n  }\n\n  /**\n   * Get the underlying account contract of the smart wallet.\n   * @returns The account contract of the smart wallet.\n   */\n  async getAccountContract() {\n    // getting a new instance everytime\n    // to avoid caching issues pre/post deployment\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.accountInfo?.abi) {\n      return sdk.getContract(await this.getAddress(), this.config.accountInfo.abi);\n    } else {\n      return sdk.getContract(await this.getAddress(), ACCOUNT_CORE_ABI);\n    }\n  }\n\n  /**\n   * Get the underlying account factory contract of the smart wallet.\n   * @returns The account factory contract.\n   */\n  async getFactoryContract() {\n    const sdk = ThirdwebSDK.fromSigner(await this.getSigner(), this.config.chain, {\n      clientId: this.config.clientId,\n      secretKey: this.config.secretKey\n    });\n    if (this.config.factoryInfo?.abi) {\n      return sdk.getContract(this.config.factoryAddress, this.config.factoryInfo.abi);\n    }\n    return sdk.getContract(this.config.factoryAddress);\n  }\n  defaultFactoryInfo() {\n    return {\n      createAccount: async (factory, owner) => {\n        return factory.prepare(\"createAccount\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      },\n      getAccountAddress: async (factory, owner) => {\n        return await factory.call(\"getAddress\", [owner, ethers.utils.toUtf8Bytes(\"\")]);\n      }\n    };\n  }\n  defaultAccountInfo() {\n    return {\n      execute: async (account, target, value, data) => {\n        return account.prepare(\"execute\", [target, value, data]);\n      },\n      getNonce: async account => {\n        return account.call(\"getNonce\", []);\n      }\n    };\n  }\n\n  /// PRIVATE METHODS\n\n  async estimateTx(tx, options) {\n    if (!this.accountApi || !this.aaProvider) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    let deployGasLimit = BigNumber.from(0);\n    const [provider, isDeployed] = await Promise.all([this.getProvider(), this.isDeployed()]);\n    if (!isDeployed) {\n      deployGasLimit = await this.estimateDeploymentGasLimit();\n    }\n    const [userOp, gasPrice] = await Promise.all([this.accountApi.createUnsignedUserOp(this.aaProvider.httpRpcClient, tx, options), getGasPrice(provider)]);\n    const resolved = await utils.resolveProperties(userOp);\n    const transactionGasLimit = BigNumber.from(resolved.callGasLimit);\n    const transactionCost = transactionGasLimit.mul(gasPrice);\n    const deployCost = deployGasLimit.mul(gasPrice);\n    const totalCost = deployCost.add(transactionCost);\n    return {\n      ether: utils.formatEther(totalCost),\n      wei: totalCost,\n      details: {\n        deployGasLimit,\n        transactionGasLimit,\n        gasPrice,\n        transactionCost,\n        deployCost,\n        totalCost\n      }\n    };\n  }\n  async estimateDeploymentGasLimit() {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const initCode = await this.accountApi.getInitCode();\n    const [initGas, verificationGasLimit] = await Promise.all([this.accountApi.estimateCreationGas(initCode), this.accountApi.getVerificationGasLimit()]);\n    return BigNumber.from(verificationGasLimit).add(initGas);\n  }\n  async prepareBatchRaw(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const resolvedTxs = await Promise.all(transactions.map(transaction => ethers.utils.resolveProperties(transaction)));\n    const targets = resolvedTxs.map(tx => tx.to || constants.AddressZero);\n    const data = resolvedTxs.map(tx => tx.data || \"0x\");\n    const values = resolvedTxs.map(tx => tx.value || BigNumber.from(0));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n  async prepareBatchTx(transactions) {\n    if (!this.accountApi) {\n      throw new Error(\"Personal wallet not connected\");\n    }\n    const targets = transactions.map(tx => tx.getTarget());\n    const data = transactions.map(tx => tx.encode());\n    const values = await Promise.all(transactions.map(tx => tx.getValue()));\n    return {\n      tx: await this.accountApi.prepareExecuteBatch(targets, values, data),\n      batchData: {\n        targets,\n        data,\n        values\n      }\n    };\n  }\n}\n\nexport { SmartWalletConnector };\n"],"names":["async","hexlifyUserOp","op","userOp","utils","Object","keys","map","key","val","startsWith","reduce","set","_ref","k","v","randomNonce","hexString","generateRandomUint192","rand1","BigInt","Math","floor","random","rand2","rand3","rand4","rand5","rand6","toString","length","BigNumber","from","PaymasterAPI","HttpRpcClient","constructor","bundlerUrl","entryPointAddress","chainId","clientId","secretKey","this","headers","isTwUrl","bundleId","globalThis","APP_BUNDLE_ID","undefined","TW_AUTH_TOKEN","TW_CLI_AUTH_TOKEN","setAnalyticsHeaders","userOpJsonRpcProvider","providers","url","name","initializing","validateChainId","chain","send","bundlerChain","parseInt","Error","sendUserOpToBundler","userOp1","hexifiedUserOp","jsonRequestData","printUserOperation","estimateUserOpGas","data","preVerificationGas","verificationGas","verificationGasLimit","callGasLimit","add","MANAGED_ACCOUNT_GAS_BUFFER","getUserOperationGasPrice","getUserOperationReceipt","userOpHash","method","VerifyingPaymasterAPI","paymasterUrl","entryPoint","super","getPaymasterAndData","response","fetch","body","JSON","stringify","jsonrpc","id","params","res","json","ok","error","statusText","code","status","result","paymasterAndData","message","getVerifyingPaymaster","UserOperationEventListener","resolve","reject","sender","nonce","timeout","_defineProperty","boundLisener","listenerCallback","bind","start","filter","filters","UserOperationEvent","setTimeout","queryFilter","once","stop","off","_len","arguments","param","Array","_key","event","args","console","log","transactionReceipt","getTransactionReceipt","success","extractFailureReason","resolved","receipt","revertReasonEvents","UserOperationRevertReason","blockHash","revertReason","decode","substring","ERC4337EthersSigner","Signer","config","originalSigner","erc4337provider","httpRpcClient","smartAccountAPI","approving","sendTransaction","transaction","options","tx","createApproveTx","wait","ethers","verifyAllNecessaryFields","multidimensionalNonce","unsigned","createUnsignedUserOp","target","to","value","gasLimit","maxFeePerGas","maxPriorityFeePerGas","userOperation","signUserOp","transactionResponse","constructUserOpTransactionResponse","unwrapError","errorIn","errorMsg","errorBody","parse","errorStatus","errorCode","failedOpMessage","reason","includes","paymasterInfo","matched","match","split","stack","transactionRequest","connect","provider","getAddress","address","getSenderAccountAddress","signMessage","checkAccountPhantom","Promise","all","getChainId","originalMsgHash","factorySupports712","signature","rpcUrl","chainIdToThirdwebRpc","walletContract","Contract","getMessageHash","signTypedDataInternal","version","verifyingContract","AccountMessage","type","encode","checkContractWalletSignature","signTransaction","ERC4337EthersProvider","originalProvider","signer","getSigner","perform","getTransaction","transactionHash","getAccountAddress","waitForTransaction","confirmations","getUserOpHash","hash","callData","getUserOpReceipt","initCode","detectNetwork","BaseAccountAPI","accountAddress","paymasterAPI","gasless","erc20PaymasterAddress","erc20TokenAddress","entryPointView","EntryPoint__factory","isPhantom","getCode","getInitCode","getAccountInitCode","getVerificationGasLimit","getNetwork","then","net","hashedUserOp","initCodeHash","callDataHash","paymasterAndDataHash","encoded","components","enc","getUserOpHashV06","senderAddress","getCounterFactualAddress","estimateCreationGas","deployerAddress","deployerCallData","estimateGas","info","bundlerFeeData","feeData","getDynamicFeeData","Celo","CeloAlfajoresTestnet","CeloBaklavaTestnet","getNonce","a","parseNumber","batchData","prepareExecute","partialOp","isAccountApproved","estimates","unwrapBundlerError","paymasterResult","paymasterResult2","signUserOpHash","interval","endtime","Date","now","userOpReceipt","AccountAPI","sdk","ThirdwebSDK","fromPrivateKey","LOCAL_NODE_PKEY","supportedChains","n","getAccountContract","accountContract","accountInfo","abi","getContract","ACCOUNT_CORE_ABI","factory","getFactoryContract","localSigner","factoryInfo","createAccount","factoryContract","factoryAddress","execute","prepareExecuteBatch","targets","values","datas","prepare","isAcountDeployed","swAddress","ERC20Abi","default","erc20Token","call","gte","pow","sub","amountToApprove","ethersSigner","erc20Contract","interface","encodeFunctionData","SmartWalletConnector","Connector","initialize","getChainProvider","ENTRYPOINT_ADDRESS","personalWallet","providerConfig","defaultFactoryInfo","defaultAccountInfo","accountApi","aaProvider","create4337Provider","connectionArgs","getProvider","isConnected","e","disconnect","switchChain","setupListeners","updateChains","chains","hasPermissionToExecute","signerAddress","restrictions","account","getAllSigners","item","permissions","approvedCallTargets","getTarget","getValue","sendBatch","transactions","prepareBatchTx","executeBatch","sendRaw","executeRaw","sendBatchRaw","batch","prepareBatchRaw","executeBatchRaw","estimate","estimateTx","getOverrides","estimateRaw","constants","estimateBatch","estimateBatchRaw","deploy","isDeployed","deployIfNeeded","grantPermissions","revokePermissions","revokeAccess","addAdmin","grantAdminPermissions","removeAdmin","revokeAdminPermissions","getAllActiveSigners","getAllAdminsAndSigners","isAdmin","startDate","expirationDate","nativeTokenLimitPerTransaction","fromSigner","owner","deployGasLimit","estimateDeploymentGasLimit","gasPrice","getGasPrice","transactionGasLimit","transactionCost","mul","deployCost","totalCost","ether","wei","details","initGas","resolvedTxs"],"sourceRoot":""}